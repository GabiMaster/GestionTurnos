@page
@{
    ViewData["Title"] = "SPA Turnos";
}
<div x-data="turnosSpa()" class="container my-5">
    <h2 class="mb-4">Agendar Turno (SPA con Alpine.js)</h2>
    <template x-if="!jwt">
        <div class="alert alert-warning">Debes iniciar sesión para agendar turnos.</div>
    </template>
    <template x-if="jwt">
        <div>
            <div class="mb-3">
                <label class="form-label">Servicio</label>
                <select class="form-select" x-model="nuevoTurno.servicioId">
                    <option value="">Seleccione un servicio</option>
                    <template x-for="s in servicios" :key="s.id">
                        <option :value="s.id" x-text="s.nombre"></option>
                    </template>
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">Fecha y hora</label>
                <input type="datetime-local" class="form-control" x-model="nuevoTurno.fechaHora" />
            </div>
            <button class="btn btn-primary" x-on:click="agendarTurno" :disabled="loading || !nuevoTurno.servicioId || !nuevoTurno.fechaHora">
                <span x-show="loading" class="spinner-border spinner-border-sm"></span>
                Agendar
            </button>
            <div class="mt-3" x-show="mensaje" x-text="mensaje"></div>
            <template x-if="qrUrl">
                <div class="mt-4 text-center">
                    <h5>QR generado</h5>
                    <img :src="qrUrl" alt="QR generado" style="width:200px;height:200px;" />
                </div>
            </template>
        </div>
    </template>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <script>
        function turnosSpa() {
            return {
                servicios: [],
                profesionales: [], // Si luego se requiere
                nuevoTurno: { servicioId: '', fechaHora: '' },
                mensaje: '',
                qrUrl: '',
                loading: false,
                jwt: sessionStorage.getItem('jwt') || localStorage.getItem('jwt') || null,
                async init() {
                    if (!this.jwt) return;
                    // Cargar servicios
                    try {
                        const resp = await fetch('/api/servicios', {
                            headers: { 'Authorization': 'Bearer ' + this.jwt }
                        });
                        if (resp.ok) {
                            this.servicios = await resp.json();
                        } else {
                            this.mensaje = 'No se pudieron cargar los servicios.';
                        }
                    } catch {
                        this.mensaje = 'Error de red al consultar servicios.';
                    }
                },
                async agendarTurno() {
                    this.mensaje = '';
                    this.qrUrl = '';
                    this.loading = true;
                    try {
                        const resp = await fetch('/api/turnos', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': 'Bearer ' + this.jwt
                            },
                            body: JSON.stringify({
                                servicioId: parseInt(this.nuevoTurno.servicioId),
                                fechaHora: this.nuevoTurno.fechaHora
                            })
                        });
                        if (resp.ok) {
                            const data = await resp.json();
                            this.mensaje = 'Turno agendado correctamente.';
                            this.qrUrl = data.tokenQR || data.TokenQR || '';
                        } else {
                            const err = await resp.text();
                            this.mensaje = 'Error al agendar turno: ' + err;
                        }
                    } catch {
                        this.mensaje = 'Error de red al agendar turno.';
                    }
                    this.loading = false;
                }
            }
        }
    </script>
}
